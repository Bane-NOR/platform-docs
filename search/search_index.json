{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#bane-nor-external-documentation","title":"Bane NOR External DocumentationWelcome to the Portal!","text":"<p>Welcome to the Bane NOR External Documentation portal! This centralized resource is designed to streamline your access to user guides, FAQs, best practices, and other relevant documentation essential for external users. This portal is your single source of truth for integrating with BaneNOR's platform services.</p> <p>The content is curated for a technical audience, including developers, system architects, and technical specialists working on Bane NOR's three service platforms: Development Platform, Integration Platform, and Data Platform. By consolidating information previously scattered across multiple wikis, we aim to save time, eliminate confusion, and enhance productivity.</p>"},{"location":"#how-to-navigate","title":"How to Navigate","text":"<p>To ensure ease of use, the documentation is organized into three main sections, each dedicated to one of Bane NOR's service platforms:</p> <ol> <li>Integration Platform: Resources for connecting and integrating systems seamlessly.</li> </ol> <p>Each section contains categorized articles, FAQs, and troubleshooting guides, making it easy to find the information relevant to your needs. Additionally, a global search function indexes all content across platforms, so you can locate any document or guide quickly without needing to know where it resides.</p>"},{"location":"#ownership-and-support","title":"Ownership and Support","text":"<p>The portal is maintained and owned by the Data and Development Platform Team. If you encounter issues, have feedback, or need assistance, feel free to reach out to us via Data and Development Platform.</p> <p>Your feedback helps us improve! Let us know how we can enhance your experience or add value to the documentation.</p> <p>This page serves as your gateway to the knowledge base that drives Bane NOR's development, integration, and data services. Explore, learn, and build confidently!</p>"},{"location":"integration/Event-Issuer/","title":"Index","text":"<p> https://example.com/\"&gt;</p>"},{"location":"integration/Event-Issuer/#why-event-issuer-exists","title":"Why Event Issuer exists","text":"<p>The goal of an Event Issuer is to provide an infrastructure to abstract event delivery via a secured RESTful API to external users and systems such as SaaS. This allows external users to maintain service boundaries, and not directly depend on any specific message broker technology. The event issuer will have the possibility to consume events from Bane NOR and produce new events.</p> <p></p>"},{"location":"integration/Event-Issuer/#consumer","title":"Consumer","text":"<p>The consumer side of the Event Issuer is based on webhooks. Webhooks are the foundation for modern API development and is a universal concept that is easily understood by many systems as a way to react to changes.</p> <p>One of the main issues though is contracts, since Event Issuer should handle many different types of events, it is important to use well-defined schemas/contracts that can be used for validation. For this, the Event Issuer can be used to get registered schemas for different events that can be subscribed to.</p>"},{"location":"integration/Event-Issuer/#what-are-webhooks","title":"What are Webhooks?","text":"<p>Webhooks are how one system notifies another system of a state change.</p> <p>In architectural terms, a webhook is a programming language agnostic approach for sending messages between distributed systems. The power of webhooks comes first from being independent of any specific tech stack and second from the notification-based approach. Regardless of your architecture, your systems can receive or broadcast webhooks without being dependent on a specific vendor or even on the same network. Further, downstream systems receiving webhooks don't need to poll a central system for updates or status changes, they can simply listen for an event and process the results.</p> <p>In practical terms, a webhook is simply an HTTP request - usually a POST - with a JSON payload or parameters broadcast from the central system. Much of the modern web is built on this distributed communication pattern.</p>"},{"location":"integration/Event-Issuer/#producing","title":"Producing","text":"<p>To produce events to Bane NOR the Event Issuer will have endpoints that can be used to send new events. These events must have predefined data schemas that will be registered into the schema registry. This gives the Event Issuer the ability to validate incoming events that they are in fact following the contract and do not cause any poison pill to our systems.</p> <p>In Confluent a Poison Pill is defined as:</p> <p>Note</p> <p>\u201ca record that has been produced to a Kafka topic and always fails when consumed, no matter how many times it is attempted.\u201d \u2014 Confluent.io</p>"},{"location":"integration/Event-Issuer/#cloudevents","title":"Cloudevents","text":"<p>A specification for describing event data in a common way - cloudevents.io</p> <p>Cloudevents is part of the Cloud Native Computing Foundation list of projects. This is a specification that tries to standardize the way we describe events and their metadata/headers.</p> <p>Event Issuer follows the cloudevents specification and will and uses the HTTP protocol bindings for all outgoing events. For producers, this will be based on the JSON Event Format.</p> <p>For more technical specifications see the cloudevents user guide section</p>"},{"location":"integration/Event-Issuer/#security","title":"Security","text":"<p>Event Issuer will go through some different phases regarding security where the initial alpha versions will only work for invited partners. We will work towards the consumer side to be self-service for the most part, where producers need to be controlled before they are allowed to send events.</p> <p>It is also important to support different authentication and authorizations not only to Bane NOR but also to external webhooks.</p> <p>Some ideas for features that will be looked into and added are:</p> <ul> <li>OAuth2, JWTs, and JWKs for authentication and authorization towards the webhook endpoint</li> <li>API Keys that can be configured by the end users if needed to authenticate to their webhook endpoints</li> <li>One Time Verification, seen at other systems like Twitter and Microsoft OneDrive. Use during setup to confirm that the consumer controls the code endpoint</li> <li>Event signing so that consumer can verify that the event has not been tampered with after being sent from Event Issuer and gives event integrity</li> </ul>"},{"location":"integration/Event-Issuer/Getting-Started/","title":"Getting Started","text":"<p>The guide contains a quick introduction to how one can get access to and start using the Event Issuer service in Bane NOR.</p> <ul> <li>Getting Started<ul> <li>Getting access<ul> <li>Onboarding</li> <li>Get API Access</li> </ul> </li> <li>Using Event Issuer<ul> <li>Starting your first subscription<ul> <li>Example Bruno Request<ul> <li>Header</li> <li>Body</li> </ul> </li> </ul> </li> <li>Producing your first message<ul> <li>Example Bruno Request<ul> <li>Header</li> <li>Body</li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"integration/Event-Issuer/Getting-Started/#getting-access","title":"Getting access","text":""},{"location":"integration/Event-Issuer/Getting-Started/#onboarding","title":"Onboarding","text":"<p>The first step in getting access to the event-issuer service is an onboarding meeting with the integration platform. Here the goal is to map out the thought-out use case/cases for your team and why the Event Issuer would be a relevant solution. To start this onboarding process, please contact the integration team on our e-mail: integrasjonsteamet@banenor.no</p> <p>If you are already onboarded and have been allowed to use the Event Issuer Service, the first step below (Get API Access) can be ignored.</p>"},{"location":"integration/Event-Issuer/Getting-Started/#get-api-access","title":"Get API Access","text":"<p>After permission has been given to use the Event Issuer service, the next step is to get API access to the event-issuer API which is available through the integration team API Management (APIM) instance. For the integration team to be able to provide you with API keys you first have to at least once log into the APIM developer portal relevant to the environment you want to use the Event Issuer in. Here is a list showcasing the possible environments:</p> <ul> <li> <p>For the staging environment: APIM Portal Staging</p> </li> <li> <p>For the production environment: APIM Portal Production</p> </li> </ul> <p>The staging environment can be used to consume data from dev topics. The reason for this is that our dev instance will not necessarily be stable for public use and as such we will serve both dev and staging with the staging event issuer for those that need to work with their own development.</p> <p>Once logged in to the developer portal for the first time, you will be visible with your e-mail address and the integration team will be able to provide you with subscription keys.</p>"},{"location":"integration/Event-Issuer/Getting-Started/#using-event-issuer","title":"Using Event Issuer","text":"<p>As mentioned in the getting access chapter of this document, the Event Issuer is available through an API present in each environment instance of APIM meaning that all available endpoints and their descriptions can be seen there. The API documentation is also available on GitHub using Redocly rendering which can be easier to read. The document can be seen here: GitHub version of API</p> <p>This means that if you prefer, you can simply test sending API requests using for example Bruno based on the API documentation. Otherwise, here is a showcase of some Bruno requests that can help you get started with links to relevant repositories.</p>"},{"location":"integration/Event-Issuer/Getting-Started/#starting-your-first-subscription","title":"Starting your first subscription","text":"<p>Once your user has gotten access to the event-issuer API, and a tenant for your organization has been created with the correct access policies, you can create your first subscription. To create a subscription, you must use the Create Subscription method towards the event-issuers subscription Endpoint. The API definition for this can be seen on the available API found in our GitHub documentation here: Create Subscription Method</p>"},{"location":"integration/Event-Issuer/Getting-Started/#example-bruno-request","title":"Example Bruno Request","text":"<p>An example request for this method can be found in our event issuer repository in our bruno folder or seen in the figure below using the Bruno API client:</p>"},{"location":"integration/Event-Issuer/Getting-Started/#header","title":"Header","text":"<p>The only required header per writing is the API key for the event-issuer API found on your account in the developer portal </p>"},{"location":"integration/Event-Issuer/Getting-Started/#body","title":"Body","text":"<p>The content of the request are just for examples. For more concrete information on all subscription body options. Check out the subscriptions page </p>"},{"location":"integration/Event-Issuer/Getting-Started/#producing-your-first-message","title":"Producing your first message","text":"<p>Once your user has gotten access to the event-issuer API, and a tenant for your organization has been created with the correct access policies, you can produce your first message towards the Bane NOR Event Backbone which as per writing is Confluent Kafka. To produce a message, you must use either the Produce Cloud Event method or Produce batch of Cloud Events  method found under the produce endpoint. The API definition for this can be seen on the available API found in our GitHub documentation here: Produce Cloud Event Method</p>"},{"location":"integration/Event-Issuer/Getting-Started/#example-bruno-request_1","title":"Example Bruno Request","text":"<p>An example request for this method can be found in our event issuer repository in the bruno folder or seen in the figure below using the Bruno API client:</p>"},{"location":"integration/Event-Issuer/Getting-Started/#header_1","title":"Header","text":"<p>The only required header per writing is the API key for the event-issuer API found on your account in the developer portal </p>"},{"location":"integration/Event-Issuer/Getting-Started/#body_1","title":"Body","text":"<p>The content of the request are just for examples </p>"},{"location":"integration/Event-Issuer/Getting-Started/cloudevents/","title":"Cloudevents","text":"<p>The cloudevents specification is used by Event Issuer both for subscribed events and produced events. The difference is how Event Issuer is using the Cloud Events for events being subscribed to and when producing.</p>"},{"location":"integration/Event-Issuer/Getting-Started/cloudevents/#subscription","title":"Subscription","text":"<p>Subscribed events are receiving the cloud events by using the HTTP Protocol Binding. This means that the CloudEvents are part of the HTTP headers.</p>"},{"location":"integration/Event-Issuer/Getting-Started/cloudevents/#producers","title":"Producers","text":"<p>Producers needs to transmit the CloudEvent metadata by using the JSON Event Format. The produce endpoints expect a content type of <code>application/cloudevents+json</code> as specified in section <code>3. Envelope</code> of the specification.</p>"},{"location":"integration/Event-Issuer/Getting-Started/faq/","title":"FAQ","text":"<ul> <li>FAQ<ul> <li>Q: I regenerated my API keys, but i no longer have access</li> <li>Q: I am not allowed to produce an event/topic with event issuer, even though my confluent user has access</li> </ul> </li> </ul> <p>Click on the questions to reveal the answer. If you cant find the answer you are looking for, please let us know by contacting integrasjonsteamet@banenor.no.</p>"},{"location":"integration/Event-Issuer/Getting-Started/faq/#q-i-regenerated-my-api-keys-but-i-no-longer-have-access","title":"Q: I regenerated my API keys, but i no longer have access","text":"<p>When you regenerate your API Keys in the API portal, you get new API-keys that are usable for the Event-issuer API found in APIM. However, the new keys are now no longer linked to the policy in Event Issuers Authorization Service, meaning that it will stop you when you try to complete the same actions as before such as CreateSubscription or ProduceEvent. To fix this issue, please get in touch with a member of the integration team.</p>"},{"location":"integration/Event-Issuer/Getting-Started/faq/#q-i-am-not-allowed-to-produce-an-eventtopic-with-event-issuer-even-though-my-confluent-user-has-access","title":"Q: I am not allowed to produce an event/topic with event issuer, even though my confluent user has access","text":"<p>When you try to produce data for an event or topic that you have a confluent user for, it will usually allow you to complete the requested action. However, Event-Issuer has an extra authorization layer that also validates that your API-Subscription Keys are allowed to produce data for the specified event. To also get this access, please contact a member of the integration team.</p>"},{"location":"integration/Event-Issuer/Getting-Started/terminology/","title":"Terminology","text":"<p>The goal of this document is to have concise explanations of important terminology found in the event issuer. For more specific information and use cases, read relevant documentation found on the event issuer Wiki.</p>","tags":["integration","event-issuer","terminology"]},{"location":"integration/Event-Issuer/Getting-Started/terminology/#event-issuer-terminology","title":"Event Issuer Terminology","text":"Term Definition Consumer An entity either internal or external to Bane NOR which uses Event Issuer to consume data from the Bane NOR Event Backbone Producer An entity either internal or external to Bane NOR which uses Event Issuer to produce data to the Bane NOR Event Backbone Subscription A generic name used in Event Issuer to explain an active consumer within Event Issuer which continuously fetches data from the Bane NOR Event Backbone and forwards it to a specified webhook endpoint Tenant A Top-level entity representing organizations or more top-level structures. All principals, policies and subscriptions are linked to a tenant although some principals can also manage the tenant Principal A Principal is an object that represents a user, group, or service account. In the initial release mainly service accounts will be supported. Policy A Policy refers to authorization policies that determine which actions principals can take within the Event Issuer eco-system. Common policies would be principal policies for tenants, subscriptions, and events determining their possibility to create new subscriptions, list out subscriptions, delete active subscriptions, produce data, etc.","tags":["integration","event-issuer","terminology"]},{"location":"integration/Event-Issuer/Getting-Started/terminology/#api-terminology","title":"API Terminology","text":"Term Definition Authentication The process of verifying the identity of a user or system attempting to access an API. Authorization Determines what actions an authenticated user or system can perform. Endpoint A specific URL where the API can receive requests, corresponding to a unique function or resource. Payload The data transmitted in an API request or response in JSON. Status Codes HTTP codes that indicate the result of an API request, such as 200 (success) or 404 (resource not found). Webhook A method for sending real-time data from the API to another system, triggered by an event. Access Token A short-lived token used to access protected API resources, issued during authentication.","tags":["integration","event-issuer","terminology"]},{"location":"integration/Event-Issuer/User-Guides/producing/","title":"Producing","text":"<p>(For concrete examples, check out our bruno collection)</p> <p>Event Issuer can be used to produce new events into Bane NOR. This is not openly available and an agreement with Bane NOR is needed to be able to produce data. The correct access rights for producing will be given on an agreement basis.</p> <p>Bane NOR uses the Cloud Event specification for producing events and supports producing both single events and the possibility of sending batches of events.</p> <p>Cloud Events has created SDKs for different languages that can be found on the main page under the <code>SDKs</code> in the menu.</p> <p>The Event Issuer has two API endpoints for this:</p> <ul> <li>{tenantId}/produce</li> <li>{tenantId}/produce/batch</li> </ul>"},{"location":"integration/Event-Issuer/User-Guides/producing/#production-modes","title":"Production modes","text":"<p>As mentioned, Event Issuer supports multiple methods for producing data into Bane NOR, both single events and batches. Including this, Event Issuer also supports two different Cloud Event structures, Binary and Structured mode showcased in the chapters below.</p> <p>At the moment only data produced with the JSON format is supported, but other content types can be added later based on user needs.</p>"},{"location":"integration/Event-Issuer/User-Guides/producing/#binary","title":"Binary","text":"<p>In binary mode, the <code>cloud event</code> headers are sent as part of the HTTP header values by using the <code>ce-</code> prefix. For more information about this see the binary mode documented in the specification.</p> <pre><code>POST event-issuer/v1/{tenantId}/produce HTTP/1.1\nHost: api.banenor.com\nce-specversion: 1.0\nce-type: cloud.domain.sub-domain.event.v1\nce-time: 2018-04-05T03:56:24Z\nce-id: 1234-1234-1234\nce-source: /mycontext/subcontext\n .... further attributes ...\nContent-Type: application/json; charset=utf-8\nContent-Length: nnnn\n\n{\n ... application data ...\n}\n</code></pre>"},{"location":"integration/Event-Issuer/User-Guides/producing/#structured","title":"Structured","text":"<p>With structured mode, the <code>cloud event</code> headers are sent as part of the HTTP payload/body data. For more information about this see the structured mode documented in the specification.</p> <pre><code>POST event-issuer/v1/{tenantId}/produce HTTP/1.1\nHost: api.banenor.com\nContent-Type: application/cloudevents+json; charset=utf-8\nContent-Length: nnnn\n\n{\n \"specversion\" : \"1.0\",\n \"type\" : \"cloud.domain.sub-domain.event.v1\",\n\n ... further attributes omitted ...\n\n \"data\" : {\n ... application data ...\n }\n}\n</code></pre>"},{"location":"integration/Event-Issuer/User-Guides/producing/#batch","title":"Batch","text":"<p>With batch mode, a list of cloud events can be sent in one HTTP request to reduce the amount of required API calls. The example showcased here applies structured mode:</p> <pre><code>POST event-issuer/v1/{tenantId}/produce/batch HTTP/1.1\nHost: api.banenor.com\nContent-Type: application/cloudevents-batch+json; charset=utf-8\nContent-Length: nnnn\n\n[\n {\n \"specversion\" : \"1.0\",\n \"type\" : \"cloud.domain.sub-domain.event.v1\",\n\n ... further attributes omitted ...\n\n \"data\" : {\n ... application data ...\n }\n },\n {\n \"specversion\" : \"1.0\",\n \"type\" : \"cloud.domain.sub-domain.event.v2\",\n\n ... further attributes omitted ...\n\n \"data\" : {\n ... application data ...\n }\n }\n]\n</code></pre>"},{"location":"integration/Event-Issuer/User-Guides/tenants/","title":"Tenants","text":"<p>Warning</p> <p>The following section is under construction</p> <p>Event Issuer uses the concept of Tenants to provide a multi-tenancy architecture around the solution. This gives Bane NOR better control over the resource usage.</p> <p>Tenants can at the moment only be created by Bane NOR.</p>"},{"location":"integration/Event-Issuer/User-Guides/tracing/","title":"Tracing","text":"<p>Event Issuer uses Open Telemetry and will deliver a tracing value for every outgoing event.</p> <p>The standardized way to transmit tracing values is by following the W3 standard by using:</p> <ul> <li><code>traceparent</code> describes the position of the incoming request in its trace graph in a portable, fixed-length format. Its design focuses on fast parsing. Every tracing tool MUST properly set <code>traceparent</code> even when it only relies on vendor-specific information in <code>tracestate</code></li> <li><code>tracestate</code> extends <code>traceparent</code> with vendor-specific data represented by a set of name/value pairs. Storing information in <code>tracestate</code> is optional.</li> </ul> <p>Users outside of BaneNOR are not able to use this feature at the moment.</p>"},{"location":"integration/Event-Issuer/User-Guides/Subscriptions/","title":"Subscriptions","text":"<p>(For concrete examples, check out our bruno collection)</p> <p>Subscriptions are the main mechanism for getting real-time events from the Bane NOR event backbone. The subscription is a reference to an application that wants events to be sent to a webhook endpoint. The subscriber can configure the authentication towards the endpoint in addition to an API key if that is needed.</p>"},{"location":"integration/Event-Issuer/User-Guides/Subscriptions/#webhook-endpoint","title":"Webhook endpoint","text":"<p>The endpoint can receive the event payload with additional metadata by using the CloudEvents HTTP binding.</p> <p>Cloud events are sent by using the HTTP Protocol Binding. This means that the CloudEvents are part of the HTTP headers.</p> <p>Info</p> <p>Bane NOR is working on standardizing event messages around the cloud event specification which means that some event types might be missing from the cloud event headers.</p>"},{"location":"integration/Event-Issuer/User-Guides/Subscriptions/#what-does-this-look-like","title":"What does this look like","text":"<p>The CloudEvent is sent in binary content mode. This means that the contents of the payload will be cloudevent.data while the CloudEvent attributes are passed as HTTP headers. Here is an example message:</p> <pre><code>POST /event-endpoint HTTP/1.1\nHost: example.com\nContent-Type: application/json\nCe-Specversion: 1.0\nCe-Type: com.example.object.created\nCe-Source: /mycontext\nCe-Id: A234-1234-1234\nCe-Time: 2025-06-12T12:00:00Z\n// Payload will be dependant on contents of the original message.\n{\n  \"objectId\": \"abc-123\",\n  \"status\": \"created\"\n}\n</code></pre>"},{"location":"integration/Event-Issuer/User-Guides/Subscriptions/#create-subscription","title":"Create Subscription","text":"<p>The following command can be used to create a subscription that uses an API key and basic authentication.</p> <pre><code>curl -H \"Ocp-Apim-Subscription-Key: ApiKey\" https://&lt;bane-nor-api-endpoint&gt;/event-issuer/v1alpha/{tenantId}/subscriptions \\ \n-d '{\"applicationId\": \"my-application\", \"event\": \"event-name\", \"URL\": \"https://my-endpoint.com/events}, \\ \n\"apiKey\": { \"header\": \"Ocp-Apim-Subscription-Key\", \"key\": \"API-key\" }, \\ \n\"authentication\": { \"username\": \"user1\", \"password\": \"my-secure-password\" }'\n</code></pre> <p>If only an API key is needed don't set the <code>authentication</code> and and only the <code>apiKey</code> section.</p>"},{"location":"integration/Event-Issuer/User-Guides/Subscriptions/Creating-subscriptions/","title":"Creating subscriptions","text":""},{"location":"integration/Event-Issuer/User-Guides/Subscriptions/Creating-subscriptions/#authentication","title":"Authentication","text":"<p>Some users require authentication and authorization to be able to communicate with their APIs. For this purpose, different types can be configured for the subscription. The following are supported:</p> <ul> <li>No authentication</li> <li>API Key</li> <li>Basicauth</li> <li>OAuth 2.0</li> </ul> <p>The idea is that the end users or services can configure the needed information to authenticate towards the webhook endpoint and update the configuration as needed.</p>"},{"location":"integration/Event-Issuer/User-Guides/Subscriptions/Creating-subscriptions/#api-key","title":"API Key","text":"<p>API Key is something that is created when subscribing to certain APIs or products. The key can be used both as a token for an API Management system to check if and how the request should be handled, and in monitoring situations to check that the number of requests is within for example rate limits set by the API owner.</p> <p>Event Issuer supports the use of an API Key configuration which can be configured with one of the other authentication mechanisms if both are needed.</p>"},{"location":"integration/Event-Issuer/User-Guides/Subscriptions/Creating-subscriptions/#basic-auth","title":"Basic Auth","text":"<p>Basic authentication with a username and password is supported as a simple mechanism for getting access to a webhook.</p>"},{"location":"integration/Event-Issuer/User-Guides/Subscriptions/Creating-subscriptions/#example","title":"Example","text":"<pre><code>{\n\u00a0 \u00a0 \"applicationId\": \"application1\",\n\u00a0 \u00a0 \"eventName\": \"cloud.open.operational.train-arrived-at-station.v1\",\n\u00a0 \u00a0 \"url\": \"https://test.no/test\",\n\u00a0 \u00a0 \"apiKey\": {\n\u00a0 \u00a0 \u00a0 \u00a0 \"header\": \"Ocp-Apim-Subscription-Key\",\n\u00a0 \u00a0 \u00a0 \u00a0 \"key\": \"jnfdi923r8fnaszy12orf98032nrcn7u982\"\n },\n\u00a0 \u00a0 \"authentication\": {\n\u00a0 \u00a0 \u00a0 \u00a0 \"type\": \"BasicAuth\",\n\u00a0 \u00a0 \u00a0 \u00a0 \"username\": \"systemx\",\n\u00a0 \u00a0 \u00a0 \u00a0 \"password\": \"use-a-secure-password\"\n }\n}\n</code></pre>"},{"location":"integration/Event-Issuer/User-Guides/Subscriptions/Creating-subscriptions/#identity-providers","title":"Identity Providers","text":"<p>An identity provider (IdP) is a system that creates, stores and manages digital identities. The IdP can either directly authenticate the user or can provide authentication services to third-party service providers (apps, websites, or other digital services).</p> <p>The following IdPs are supported for fetching OAuth2.0 tokens:</p> <ul> <li>Maskinporten</li> <li>Entra ID</li> </ul> <p>The following diagram shows the system context for communication with an IdP.@</p> <p></p>"},{"location":"integration/Event-Issuer/User-Guides/Subscriptions/Creating-subscriptions/#maskinporten","title":"Maskinporten","text":"<p>Maskinporten is a Norwegian solution to add authorizations between companies that need to be able to share data between systems or in other words machine-to-machine.</p> <p>Example:</p> <pre><code>{\n\u00a0 \u00a0 \"applicationId\": \"application1\",\n\u00a0 \u00a0 \"eventName\": \"cloud.open.operational.train-arrived-at-station.v1\",\n\u00a0 \u00a0 \"url\": \"https://test.no/test\",\n\u00a0 \u00a0 \"apiKey\": {\n\u00a0 \u00a0 \u00a0 \u00a0 \"header\": \"Ocp-Apim-Subscription-Key\",\n\u00a0 \u00a0 \u00a0 \u00a0 \"key\": \"jnfdi923r8fnaszy12orf98032nrcn7u982\"\n },\n\u00a0 \u00a0 \"authentication\": {\n\u00a0 \u00a0 \u00a0 \u00a0 \"type\": \"Maskinporten\",\n\u00a0 \u00a0 \u00a0 \u00a0 \"scopes\": [ \"company:apix:write\" ]\n }\n}\n</code></pre> <p>Info</p> <p>To be able to use Maskinporten the integration team at Bane NOR needs to be contacted to link the Maskinporten integration to be able to use the correct scope from the API vendor.</p> <p>For companies that use a token exchange where the Maskinporten token needs to be exchanged with a company-specific token, contact the integration team with the specific needs. This will then be added to the backlog and implemented as a tenant-specific solution for those needs.</p>"},{"location":"integration/Event-Issuer/User-Guides/Subscriptions/Creating-subscriptions/#entra-id","title":"Entra ID","text":"<p>Entra ID is the standard OAuth authentication mechanism used in Azure. To be able to use this with Event Issuer subscriptions, we will need to do a server-to-server interaction that runs in the background, without immediate interaction with a user. This is done through an OAuth client-credential flow that grants permissions directly to the application itself by an administrator.</p> <p>Entra Id also uses the JWT Grant mechanisms to obtain the <code>access_token</code> for requests. These are the configuration options for Entra.</p> <pre><code>// With client secret\n{\n\u00a0 \u00a0 \"AuthUrl\": \"https://login.microsoftonline.com/\",\n\u00a0 \u00a0 \"TenantId\": \"[Enter here the tenantID or domain name for your Azure AD tenant]\",\n\u00a0 \u00a0 \"ClientId\": \"[Enter here the ClientId for your application]\",\n\u00a0 \u00a0 \"ClientSecret\": \"string\",\n\u00a0 \u00a0 \"scope\": \"string\",\n\u00a0 \u00a0 \"grant_type\": \"client_credentials\"\n}\n</code></pre> <pre><code>// With a certificate or federated credential\n{\n\u00a0 \u00a0 \"AuthUrl\": \"https://login.microsoftonline.com/\",\n\u00a0 \u00a0 \"TenantId\": \"[Enter here the tenantID or domain name for your Azure AD tenant]\",\n\u00a0 \u00a0 \"ClientId\": \"[Enter here the ClientId for your application]\",\n\u00a0 \u00a0 \"client_assertion_type\": \"The value must be set to urn:ietf:params:oauth:client-assertion-type:jwt-bearer.\",\n\u00a0 \u00a0 \"client_assertion\": \"JSON web token needed to sign with the certificate\",\n\u00a0 \u00a0 \"scope\": \"string\",\n\u00a0 \u00a0 \"grant_type\": \"client_credentials\"\n}\n</code></pre> <p>Example:</p> <pre><code>{\n\u00a0 \u00a0 \"applicationId\": \"application1\",\n\u00a0 \u00a0 \"eventName\": \"cloud.open.operational.train-arrived-at-station.v1\",\n\u00a0 \u00a0 \"url\": \"https://test.no/test\",\n\u00a0 \u00a0 \"apiKey\": {\n\u00a0 \u00a0 \u00a0 \u00a0 \"header\": \"Ocp-Apim-Subscription-Key\",\n\u00a0 \u00a0 \u00a0 \u00a0 \"key\": \"jnfdi923r8fnaszy12orf98032nrcn7u982\"\n },\n\u00a0 \u00a0 \"authentication\": {\n\u00a0 \u00a0 \u00a0 \u00a0 \"type\": \"EntraId\",\n\u00a0 \u00a0 \u00a0 \u00a0 \"url\": \"https://login.microsoftonline.com/{tenantId}/oauth2/v2.0/token\",\n\u00a0 \u00a0 \u00a0 \u00a0 \"clientId\": \"d0a3da30-8936-4800-9c23-37c1b86d8a63\",\n\u00a0 \u00a0 \u00a0 \u00a0 \"clientSecret\": \"7hzQ3bPSNThb7Cgem+a+w2RqLMKr*LqCSALYco-zQyi4ueUnVo\",\n\u00a0 \u00a0 \u00a0 \u00a0 \"scopes\": [ \"apix:write\" ]\n }\n}\n</code></pre>"},{"location":"integration/Event-Issuer/User-Guides/Subscriptions/Creating-subscriptions/#client-credentials-flow","title":"Client credentials flow","text":"<p>This diagram describes how authentication works between background services. For Event-Issuer the flow would look like this.</p> <p>This flow assumes that an admin has created an app registration for the subscription and given it the correct permissions to the Web API in question.</p> <pre><code>sequenceDiagram\n participant Event Issuer Subscription\n participant EntraId\n participant Web API\n\n Event Issuer Subscription-&gt;&gt;EntraId: Request token\n EntraId--&gt;&gt;Event Issuer Subscription: Returns token\n loop Until the consumer has caught up to the offset\n Event Issuer Subscription-&gt;&gt;Web API: Posts data to API with a token in Authorization header\n end\n Web API-&gt;&gt;Web API: Validates token\n alt Success\n Web API--&gt;&gt;Event Issuer Subscription: 200 ok\n else Failed\n Web API --&gt;&gt;Event Issuer Subscription: 401, 403, 404, 501, etc.\n end</code></pre>"},{"location":"integration/Event-Issuer/User-Guides/Subscriptions/Creating-subscriptions/#access-control","title":"Access control","text":"<p>Microsoft provides two options to grant access to applications: access control lists and application permissions.</p>"},{"location":"integration/Event-Issuer/User-Guides/Subscriptions/Creating-subscriptions/#access-control-lists","title":"Access control lists","text":"<p>Access control lists enforce authorization based on a list of application IDs that it knows and grants a specific level of access to. When the relevant resource receives a token, it decodes it and checks it against the list of authorized clients.</p>"},{"location":"integration/Event-Issuer/User-Guides/Subscriptions/Creating-subscriptions/#application-permissions","title":"Application permissions","text":"<p>For data owned by organizations, Microsoft recommends using application permissions. To use application roles with your API, you need to expose the app roles in the API's app registration, and then configure the required roles in your client's (the subscription) app registration. The user who creates a subscription will also have to create an app registration in their organization that they provide the necessary permissions.</p>"},{"location":"integration/Event-Issuer/User-Guides/Subscriptions/debugging/","title":"Debugging subscriptions","text":"<p>To make the event issuer more self-service, the integration team has set up multiple solutions to allow for as much debugging as possible on the client side before a member of the integration team has to get involved. The main methods recommended for debugging by the integration team are:</p> <ul> <li>Checking subscription status</li> </ul>"},{"location":"integration/Event-Issuer/User-Guides/Subscriptions/debugging/#debugging-by-checking-subscription-status","title":"Debugging by checking subscription status","text":"<p>The Event Issuer has built-in Error Reporting linked to the GetSubscription methods. This means that if an error has occurred on your subscription, you can call the GetSubscription method which in case an error has occurred, will return an error report with useful debug information such as:</p> <ul> <li>A relevant Error Message</li> <li>A Trace ID for tracking the error in Grafana</li> <li>A HTTP status code</li> <li>A timestamp for when the error occurred</li> </ul> <p>An example of how this response looks like:</p> <pre><code>{\n  \"id\": \"01JYP5ZRMZVSAG6VCJB6C430F5\",\n  \"applicationId\": \"Test-Subscription\",\n  \"eventName\": \"cloud.unauthorized.topic\",\n  \"url\": \"https://123spill.no/\",\n  \"apiKeyHeader\": \"Ocp-Apim-Subscription-Key\",\n  \"authentication\": null,\n  \"workerStatus\": \"Failed\",\n  \"createdAt\": \"2025-06-26T13:14:14.5600252Z\",\n  \"updatedAt\": \"2025-06-27T12:02:13.7163623Z\",\n  \"deletedAt\": null,\n  \"errors\": [\n    {\n      \"traceID\": \"00-f913d58d1fe8dbb6cb0400ba4646b389-23cde68619bb145b-01\",\n      \"errorMessage\": \"Not authorized for topic: cloud.unauthorized.topic\",\n      \"httpStatusCode\": null,\n      \"createdAt\": \"2025-06-27T12:02:13.7163623Z\"\n    }\n  ]\n}\n</code></pre>"},{"location":"integration/Event-Issuer/apis/v1/","title":"Event Issuer API spec","text":"<p>hide:   #- navigation - toc</p> <p></p>"},{"location":"integration/Payload-Manager/","title":"Index","text":"<p>tags: - integration - payload-manager</p>"},{"location":"integration/Payload-Manager/#payload-manager","title":"Payload Manager","text":"<ul> <li>Payload Manager<ul> <li>General Overview</li> <li>Get started</li> </ul> </li> </ul> <p>Payload Manager is a service supported by the Integration Team for handling file transfer between services. This solves the <code>claim check pattern</code> where services can upload a file to a managed storage container and a claim check event is generated onto a Kafka topic. Other systems can then subscribe to said Kafka topic, receive information when a new file is available, and download the file themselves from the storage account.</p> <p>Services <code>should</code> use the Confluent Platform for async communications, but as a way of working towards this goal, the Payload Manager can be used as a temporary solution. There might also be cases where it is not possible to use Kafka as the main way of transferring data, for example, if large pictures or video files need to be moved. For these cases, the Payload Manager can be used as the main solution for moving data.</p>"},{"location":"integration/Payload-Manager/#general-overview","title":"General Overview","text":"<p>A general overview of the <code>claim check</code> pattern in Bane NOR:</p> <p></p>"},{"location":"integration/Payload-Manager/#get-started","title":"Get started","text":"<p>To get started with the payload manager, check out our getting started guide: Getting started</p>"},{"location":"integration/Payload-Manager/Getting-Started/","title":"Getting Started","text":"<p>The goal of this guide is to give a quick introduction to how one can get access to and start using the Payload Manager in Bane NOR.</p> <ul> <li>Getting Started<ul> <li>Onboarding</li> <li>Payload Manager Storage Account Structure</li> <li>Using the Payload Manager</li> <li>Using the API<ul> <li>Reaching the storage account</li> </ul> </li> <li>Other relevant info<ul> <li>Consuming Payload Manager Events</li> </ul> </li> </ul> </li> </ul> <p>Info</p> <p>The Payload Manager solution is only available to norwegian companies as per writing as the Authentication and Authorization mechanism relies on Skyporten.</p>","tags":["integration","payload-manager","API","blobs","storage"]},{"location":"integration/Payload-Manager/Getting-Started/#onboarding","title":"Onboarding","text":"<p>The first step in getting access to the payload-manager service is contacting the integration platform team. To contact us, please send us an e-mail at: integrasjonsteamet@banenor.no. We aim to respond within a day of receiving an e-mail.</p> <p>In the e-mail, please detail:</p> <ul> <li> <p>Why you would like to use the solution</p> </li> <li> <p>Who or what systems in Bane NOR you want to interact with</p> </li> <li> <p>How we should contact you for further details and questions</p> </li> </ul>","tags":["integration","payload-manager","API","blobs","storage"]},{"location":"integration/Payload-Manager/Getting-Started/#payload-manager-storage-account-structure","title":"Payload Manager Storage Account Structure","text":"<p>The payload manager utilizes a storage account divided up into multiple containers. Each container represents a domain within Bane NOR meaning that the container you should use is based on the data that you will be producing. To decide on a container, please consult with the team you are communicating with within Bane NOR and the integration team if a new container is required.</p> <p>The storage accounts also employ hierarchical namespaces meaning that they employ ACL (Access control lists). This means that each folder in a container has an extra layer of security requiring both RBAC and ACL to be allowed to read/write.</p>","tags":["integration","payload-manager","API","blobs","storage"]},{"location":"integration/Payload-Manager/Getting-Started/#using-the-payload-manager","title":"Using the Payload Manager","text":"<p>Once it has been decided that you will start using the payload manager, and it has been decided which container you should use, you can start looking into how to produce/consume files. For external parties such as yourself, Bane NOR has implemented the use of Skyporten for Authentication and Authorization purposes. The required resources in the Bane NOR's tenant are provided by the integration team on request, and will be handled as part of the onboarding procedure. For more information on how Bane NOR utilizes Skyporten to allow external parties access to the storage accounts, please refer to: Skyporten.</p>","tags":["integration","payload-manager","API","blobs","storage"]},{"location":"integration/Payload-Manager/Getting-Started/#using-the-api","title":"Using the API","text":"<p>As mentioned, the Payload Manager exposes two storage accounts per environment through an API found in Bane NOR's APIM instance. The API uses Microsoft's own blob storage API meaning that all API methods that work directly against a regular storage account, will also work with the API we present, given that you have the correct RBAC and ACL access.</p> <p>To check out the API, please go to our page here: - Payload Manager API</p> <p>The API can also be found in Bane NOR's development portals given you have the correct access, found on these two URL's:</p> <ul> <li> <p>Staging: https://test.api-portal.apps.banenor.no/</p> </li> <li> <p>Production: https://api-portal.banenor.no/</p> </li> </ul>","tags":["integration","payload-manager","API","blobs","storage"]},{"location":"integration/Payload-Manager/Getting-Started/#reaching-the-storage-account","title":"Reaching the storage account","text":"<p>As mentioned, the API provided by Bane NOR exposes multiple storage accounts through the same api (two accounts per environment). For the API to be able to select the correct backend storage account, it uses an APIM policy which both validates the incoming JWT token and checks specifically the audience header in the JWT token to determine which backend to use.</p> <p>This Audience header MUST be scoped to the external storage account you are trying to reach. The accounts we expose are:</p> Environment Name Development bnplmextnwestdev Staging bnplmextnwesttest Production bnplmextnwestprod <p>This means that the audience MUST contain:</p> <p>https://&lt;storage-account-name&gt;.blob.core.windows.net</p> <p>For concrete examples on how to achieve this, please to go our user guide: Uploading files with skyporten</p>","tags":["integration","payload-manager","API","blobs","storage"]},{"location":"integration/Payload-Manager/Getting-Started/#other-relevant-info","title":"Other relevant info","text":"","tags":["integration","payload-manager","API","blobs","storage"]},{"location":"integration/Payload-Manager/Getting-Started/#consuming-payload-manager-events","title":"Consuming Payload Manager Events","text":"<p>The Payload Manager presents a claim-check solution which produces messages to kafka. In the case that you have to consume information, the event-issuer can be utilized.</p> <p>Event Issuer: Use the Event Issuer API to listen to the payload-manager topic.</p>","tags":["integration","payload-manager","API","blobs","storage"]},{"location":"integration/Payload-Manager/Getting-Started/File-and-blob-restrictions/","title":"File and blob restrictions","text":"<p>To ensure the security and quality of our file storage, we have implemented policies on the storage account API to restrict certain files.</p>","tags":["integration","payload-manager","API","blobs","storage","restrictions","policies"]},{"location":"integration/Payload-Manager/Getting-Started/File-and-blob-restrictions/#file-retention","title":"File Retention","text":"<p>Files stored inside the payload manager storage accounts will be kept for a standard of 8 days from creation. This is per our Kafka message retention policy of 7 days + 1.</p>","tags":["integration","payload-manager","API","blobs","storage","restrictions","policies"]},{"location":"integration/Payload-Manager/Getting-Started/File-and-blob-restrictions/#file-type-restriction","title":"File type restriction","text":"<p>To limit potentially dangerous files, we keep a whitelist of allowed file types listed in the table below. If you need to upload a file type not in this list, please contact the integration team.</p> Category Allowed file types Text files .txt .csv .log .json .xml .md Images .jpg .jpeg .png .gif .bmp .tiff .webp Audio &amp; Video .mp3 .wav .mp4 .avi .mov .flac Office Documents .pdf .doc .docx .xls .xlsx .ppt .pptx Archives .zip .tar .gz .rar Code Files .html .css .js .py .cs Other .vp0 .vspe .kmm .kmm2 .bmp .hdr","tags":["integration","payload-manager","API","blobs","storage","restrictions","policies"]},{"location":"integration/Payload-Manager/Getting-Started/File-and-blob-restrictions/#file-size-restriction","title":"File Size Restriction","text":"<p>We currently limit each request towards storage to 100 mb per request. This is a limit set to ensure only reasonably large files are uploaded to the storage account. When uploading larger files, they have to be uploaded in multiple blocks.</p>","tags":["integration","payload-manager","API","blobs","storage","restrictions","policies"]},{"location":"integration/Payload-Manager/Getting-Started/File-and-blob-restrictions/#file-name-restrictions","title":"File name restrictions","text":"<p>To prevent path traversal, other dangers, and programmatic errors, we have put restrictions on names allowed to be uploaded to the storage account. This restriction follows the regex <code>[a-zA-Z0-9.-]</code>.</p>","tags":["integration","payload-manager","API","blobs","storage","restrictions","policies"]},{"location":"integration/Payload-Manager/Getting-Started/File-and-blob-restrictions/#examples","title":"Examples","text":"Filename Allowed/Disallowed kj\u00f8rebok.xlsx Disallowed kjorebok.xlsx Allowed ola\u00b4s-reisebok.txt Disallowed olas-reisebok.txt Allowed","tags":["integration","payload-manager","API","blobs","storage","restrictions","policies"]},{"location":"integration/Payload-Manager/Getting-Started/Skyporten/","title":"Skyporten","text":"<ul> <li>Skyporten<ul> <li>What does the Integration Platform provide<ul> <li>TLDR</li> </ul> </li> <li>What must you do yourself<ul> <li>TLDR</li> </ul> </li> </ul> </li> </ul> <p>Skyporten is a service from DigDir, created to allow Norwegian companies to share data between themselves using MaskinPorten as an external iDP token provider and exchanging said token with your own cloud environment such as GCP, Azure, or AWS. A detailed drawing from DigDir showcasing the flow can be seen from DigDirs documentation.</p> <p>The payload manager solution utilizes Skyporten for this purpose as an external third party token provider, which can be exchanged for an Entra-Id token within Bane NOR's Azure Tenant, where the Entra-id token can be used to authenticate against the required storage account.</p>","tags":["integration","payload-manager","API","blobs","storage","skyporten","access"]},{"location":"integration/Payload-Manager/Getting-Started/Skyporten/#what-does-the-integration-platform-provide","title":"What does the Integration Platform provide","text":"<p>On request, the integration platform within Bane NOR will generate and provide access to a managed identity with a federated credential within Bane NOR's Azure tenant for your organization. This manged identity is then used by the integration platform to provide you with the correct RBAC and ACL permissions for your use-case.</p> <p>Due to how Skyporten provides access to an entire company at the time, the managed identity you receive within the BaneNOR tenant will also be available for your entire company, you do not get a team specific one.</p> <p>The integration platform also hosts an API in both MaskinPorten environments which you will be given access to so you can fetch an identity token which you will use in your token exchange.</p>","tags":["integration","payload-manager","API","blobs","storage","skyporten","access"]},{"location":"integration/Payload-Manager/Getting-Started/Skyporten/#tldr","title":"TLDR","text":"<ul> <li>Managed identity with Federated credential in Bane NOR tenant</li> <li>API in maskinporten scoped to correct resource</li> </ul>","tags":["integration","payload-manager","API","blobs","storage","skyporten","access"]},{"location":"integration/Payload-Manager/Getting-Started/Skyporten/#what-must-you-do-yourself","title":"What must you do yourself","text":"<p>To be able to get the token from MaskinPorten, you have to create your own self-service integration through DigDir: https://samarbeid.digdir.no/ This self-service integration has to provide access to the scope which is the API we provide. The API is named:</p> <ul> <li>banenor:payloadmanager.storage (In both test and prod)</li> </ul> <p>We will provide your organization with access to the API as part of onboarding.</p> <p>Once you have your own integration, you have to write your own logic for fetching a maskinPorten token. Some code examples from DigDir might be of assistance: https://docs.digdir.no/docs/Maskinporten/maskinporten_guide_apikonsument</p> <p>Lastly, you have to implement code to interact with our storage accounts. We have user examples in Dotnet to achieve this showcased in our guide: Uploading files with skyporten</p>","tags":["integration","payload-manager","API","blobs","storage","skyporten","access"]},{"location":"integration/Payload-Manager/Getting-Started/Skyporten/#tldr_1","title":"TLDR","text":"<ul> <li>Create your own self service integration</li> <li>Create your own logic for fetching maskinporten token</li> <li>Create your own logic for using the storage account (see user-guide for help)</li> </ul>","tags":["integration","payload-manager","API","blobs","storage","skyporten","access"]},{"location":"integration/Payload-Manager/User-Guides/Uploading-files-with-skyporten/","title":"Uploading and Downloading files","text":"<p>The following guide will show you how you can start uploading or downloading files with the Storage Accounts exposed by Bane NOR</p>","tags":["integration","payload-manager","API","blobs","storage","guide",".NET","C#"]},{"location":"integration/Payload-Manager/User-Guides/Uploading-files-with-skyporten/#information","title":"Information","text":"<ul> <li> <p>The blob store (storage container) is accessible from API Management which is just a proxy in front of a Storage Account.</p> </li> <li> <p>To be able to upload and download files, your service needs an Entra identity with correct access to the blob store. Check out our guide on how to receive this here: Skyporten</p> </li> <li> <p>Since our API uses Microsofts own blob storage API, all methods from Azure Blob Storage client library will work.</p> </li> </ul>","tags":["integration","payload-manager","API","blobs","storage","guide",".NET","C#"]},{"location":"integration/Payload-Manager/User-Guides/Uploading-files-with-skyporten/#nuget","title":"Nuget","text":"<p>To be able to use the code example, the following Nuget packages are needed:</p> <p>Global Nuget Packages:</p> <ul> <li>Azure.Identity</li> <li>Azure.Storage.Blobs</li> </ul>","tags":["integration","payload-manager","API","blobs","storage","guide",".NET","C#"]},{"location":"integration/Payload-Manager/User-Guides/Uploading-files-with-skyporten/#easy-aspnet-programcs","title":"Easy ASP.NET program.cs","text":"<p>The example below showcases a C# program for uploading a file using the payload manager storage account API. More in-depth examples can be seen in Microsoft documentation linked to at the top of this article.</p>","tags":["integration","payload-manager","API","blobs","storage","guide",".NET","C#"]},{"location":"integration/Payload-Manager/User-Guides/Uploading-files-with-skyporten/#upload-with-skyporten","title":"Upload with Skyporten","text":"<pre><code>using Azure.Identity;  \nusing Azure.Storage.Blobs;  \n  \n// This method uses private/public key pair, can also be done with certificates\nvar maskinPortenOptions = new MaskinportenOptions()  \n{  \n    ClientId = \"id-of-your-self-service-integration\",   \n    Audience = \"https://test.sky.maskinporten.no\", // Prod: \"https://sky.maskinporten.no\"  \n    KeyId = \"id-for-your-key\",  \n    Url = new Uri(\"https://test.sky.maskinporten.no/token\"),  // Prod: \"https://sky.maskinporten.no/token\"   \n};  \n  \n// Our implementation for fetching token from maskinporten\nvar httpClient = new HttpClient();  \nvar tokenGenerator = new TokenGenerator(maskinPortenOptions, httpClient);  \nvar header = await tokenGenerator.GetAuthenticationHeaderValueAsync();  \n\n// ManagedIdentityClientId is provided by integration team\nvar AzureTenantId = \"6ee535f2-3064-4ac9-81d8-4ceb2ff790c6\";  \nvar ManagedIdentityClientId = \"client-id\";  \nvar tokenPath = \"/tmp/maskinporten-token.txt\";  \nawait File.WriteAllTextAsync(tokenPath, header.Parameter); //header.parameter = token received from maskinporten\n\n// By setting these environment variables, DefaultAzureCredential uses them automatically\n// for the workloadIdentityCredential flow which handles token exchange automatically.\nEnvironment.SetEnvironmentVariable(\"AZURE_CLIENT_ID\", clientId);\nEnvironment.SetEnvironmentVariable(\"AZURE_TENANT_ID\", tenantId);\nEnvironment.SetEnvironmentVariable(\"AZURE_FEDERATED_TOKEN_FILE\", tokenPath);\n\nvar defaultAzureCredential = new DefaultAzureCredential();\n\n// Use correct storage account\nvar blobClientOptions = new BlobClientOptions()\n{\n    Audience = \"https://bnplmextnwesttest.blob.core.windows.net\"\n};\n\n// Use correct API environment\nvar blobServiceClient = new BlobServiceClient(  \n    new Uri(\"https://test.api.apps.banenor.no/payload-manager/v1\"), workLoadIdentity, blobClientOptions);  \n\nstring containerName = \"container-name\";  \n  \nvar containerClient = blobServiceClient.GetBlobContainerClient(containerName);  \n  \n// Create a local file in the ./data/ directory for uploading and downloading  \nstring localPath = \"data\";  \nDirectory.CreateDirectory(localPath);  \nstring fileName = \"quickstart\" + Guid.NewGuid().ToString() + \".txt\";  \nstring localFilePath = Path.Combine(localPath, fileName);  \nawait File.WriteAllTextAsync(localFilePath, \"Hello, World!\");  \n\n// Microsoft SDK is not able to correctly add /path/to/folder/ so you must re-specify version and container-name\nBlobClient blobClient = containerClient.GetBlobClient(\"v1/container-name/path/to/folder/\" + fileName);\n\n  \nawait blobClient.UploadAsync(localFilePath, false);  \n</code></pre>","tags":["integration","payload-manager","API","blobs","storage","guide",".NET","C#"]},{"location":"integration/Payload-Manager/apis/v1/","title":"Payload Manager API spec","text":"<p>hide:   #- navigation - toc</p> <p></p>"}]}